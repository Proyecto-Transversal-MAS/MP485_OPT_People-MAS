package view;

import static utils.DataValidation.calculateNifLetter;
import static utils.DataValidation.checkEmailAddress;
import static utils.DataValidation.isLetter;
import static utils.DataValidation.isNumber;

import java.awt.dnd.DropTarget;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.jdatepicker.DateModel;
import org.jdatepicker.JDatePicker;
import static utils.DataValidation.checkPhoneNumber;
import static utils.DataValidation.checkZipCode;

/**
 * Interface used to register a person. It is mandatory to enter at least the
 * NIF and the name.
 *
 * @author Francesc Perez
 * @version 1.1.0
 */
public class Insert extends javax.swing.JDialog {

    public Insert(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        DropPhotoListener d = new DropPhotoListener(photo, this);
        DropTarget dropTarget = new DropTarget(photo, d);
        insert.setEnabled(false);
    }

    public JButton getReset() {
        return reset;
    }

    public JButton getInsert() {
        return insert;
    }

    public JTextField getNam() {
        return name;
    }

    public JDatePicker getDateOfBirth() {
        return dateOfBirth;
    }

    public JTextField getNif() {
        return nif;
    }

    public JLabel getPhoto() {
        return photo;
    }

    public JTextField getEmail() {
        return email;
    }

    public JCheckBox getCheck() {
        return EmailIsValidCheck;
    }

    public JCheckBox getPhoneCheck() {
        return PhoneValidCheck;
    }

    public JTextField getPhone() {
        return phone;
    }

    public JCheckBox getZipCodeCheck() {
        return ZipCodeValidCheck;
    }

    public JTextField getZipCode() {
        return zipCode;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jCheckBox1 = new javax.swing.JCheckBox();
        insert = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        reset = new javax.swing.JButton();
        photo = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nif = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dateOfBirth = new org.jdatepicker.JDatePicker();
        jLabel3 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        checkEmailField = new javax.swing.JButton();
        EmailIsValidCheck = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        phone = new javax.swing.JTextField();
        checkPhoneField = new javax.swing.JButton();
        PhoneValidCheck = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        zipCode = new javax.swing.JTextField();
        checkZipCodeField = new javax.swing.JButton();
        ZipCodeValidCheck = new javax.swing.JCheckBox();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insert - People v1.1.0");
        setMinimumSize(new java.awt.Dimension(810, 280));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        insert.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        insert.setText("INSERT");
        insert.setMaximumSize(new java.awt.Dimension(187, 33));
        insert.setMinimumSize(new java.awt.Dimension(187, 33));
        insert.setPreferredSize(new java.awt.Dimension(187, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 100, 0, 0);
        getContentPane().add(insert, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Email");
        jLabel1.setMaximumSize(new java.awt.Dimension(100, 22));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 22));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 22, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        name.setText("Enter full name");
        name.setMaximumSize(new java.awt.Dimension(400, 22));
        name.setMinimumSize(new java.awt.Dimension(400, 22));
        name.setPreferredSize(new java.awt.Dimension(400, 22));
        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 24, 0, 0);
        getContentPane().add(name, gridBagConstraints);

        reset.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        reset.setText("RESET");
        reset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reset.setMaximumSize(new java.awt.Dimension(187, 33));
        reset.setMinimumSize(new java.awt.Dimension(187, 33));
        reset.setPreferredSize(new java.awt.Dimension(187, 33));
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 24, 0, 0);
        getContentPane().add(reset, gridBagConstraints);

        photo.setBackground(new java.awt.Color(255, 255, 255));
        photo.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N
        photo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        photo.setText("<html><center><center>Drag and drop your file here</center><br><br>PHOTO</center></br><br><center> <i>Supported format: PNG.</i></center></br><br><center><i>Max. size 64KB</i></center></html>");
        photo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        photo.setMaximumSize(new java.awt.Dimension(150, 135));
        photo.setMinimumSize(new java.awt.Dimension(150, 135));
        photo.setPreferredSize(new java.awt.Dimension(150, 135));
        photo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photoMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 19;
        gridBagConstraints.ipady = 36;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(photo, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("NIF");
        jLabel5.setMaximumSize(new java.awt.Dimension(100, 22));
        jLabel5.setMinimumSize(new java.awt.Dimension(100, 22));
        jLabel5.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 22, 0, 0);
        getContentPane().add(jLabel5, gridBagConstraints);

        nif.setText("Enter NIF number, letter is calculated (e.g., 12345678)");
        nif.setMaximumSize(new java.awt.Dimension(400, 22));
        nif.setMinimumSize(new java.awt.Dimension(400, 22));
        nif.setPreferredSize(new java.awt.Dimension(400, 22));
        nif.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nifKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nifKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nifKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 24, 0, 0);
        getContentPane().add(nif, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("Date of Birth");
        jLabel8.setMaximumSize(new java.awt.Dimension(150, 22));
        jLabel8.setMinimumSize(new java.awt.Dimension(150, 22));
        jLabel8.setPreferredSize(new java.awt.Dimension(150, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 22, 0, 0);
        getContentPane().add(jLabel8, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 8)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Author: francesc.perez@stucom.com - Version 1.1.0");
        jLabel2.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.gridwidth = 26;
        gridBagConstraints.ipadx = 543;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(26, 8, 34, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        dateOfBirth.setMaximumSize(new java.awt.Dimension(350, 22));
        dateOfBirth.setMinimumSize(new java.awt.Dimension(350, 22));
        dateOfBirth.setPreferredSize(new java.awt.Dimension(350, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 24, 0, 0);
        getContentPane().add(dateOfBirth, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Name");
        jLabel3.setMaximumSize(new java.awt.Dimension(100, 22));
        jLabel3.setMinimumSize(new java.awt.Dimension(100, 22));
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 22, 0, 0);
        getContentPane().add(jLabel3, gridBagConstraints);

        email.setMaximumSize(new java.awt.Dimension(400, 22));
        email.setMinimumSize(new java.awt.Dimension(400, 22));
        email.setPreferredSize(new java.awt.Dimension(400, 22));
        email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = -106;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 24, 0, 0);
        getContentPane().add(email, gridBagConstraints);

        checkEmailField.setText("CHECK");
        checkEmailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEmailFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 6, 0, 0);
        getContentPane().add(checkEmailField, gridBagConstraints);

        EmailIsValidCheck.setEnabled(false);
        EmailIsValidCheck.setFocusable(false);
        EmailIsValidCheck.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 14;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 10, 0, 34);
        getContentPane().add(EmailIsValidCheck, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Phone");
        jLabel4.setMaximumSize(new java.awt.Dimension(100, 22));
        jLabel4.setMinimumSize(new java.awt.Dimension(100, 22));
        jLabel4.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 22, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        phone.setMaximumSize(new java.awt.Dimension(400, 22));
        phone.setMinimumSize(new java.awt.Dimension(400, 22));
        phone.setPreferredSize(new java.awt.Dimension(400, 22));
        phone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                phoneKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = -106;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 24, 0, 0);
        getContentPane().add(phone, gridBagConstraints);

        checkPhoneField.setText("CHECK");
        checkPhoneField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPhoneFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 6, 0, 0);
        getContentPane().add(checkPhoneField, gridBagConstraints);

        PhoneValidCheck.setEnabled(false);
        PhoneValidCheck.setFocusable(false);
        PhoneValidCheck.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 14;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 10, 0, 34);
        getContentPane().add(PhoneValidCheck, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("ZIP Code");
        jLabel6.setMaximumSize(new java.awt.Dimension(100, 22));
        jLabel6.setMinimumSize(new java.awt.Dimension(100, 22));
        jLabel6.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 22, 0, 0);
        getContentPane().add(jLabel6, gridBagConstraints);

        zipCode.setMaximumSize(new java.awt.Dimension(400, 22));
        zipCode.setMinimumSize(new java.awt.Dimension(400, 22));
        zipCode.setPreferredSize(new java.awt.Dimension(400, 22));
        zipCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                zipCodeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                zipCodeKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = -106;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 24, 0, 0);
        getContentPane().add(zipCode, gridBagConstraints);

        checkZipCodeField.setText("CHECK");
        checkZipCodeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkZipCodeFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 6, 0, 0);
        getContentPane().add(checkZipCodeField, gridBagConstraints);

        ZipCodeValidCheck.setEnabled(false);
        ZipCodeValidCheck.setFocusable(false);
        ZipCodeValidCheck.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 14;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 10, 0, 34);
        getContentPane().add(ZipCodeValidCheck, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void showInsert() {
        if (!email.getText().isEmpty() && !phone.getText().isEmpty() && !zipCode.getText().isEmpty() && !name.getText().isEmpty() && !nif.isEditable()) {
            insert.setEnabled(true);
        } else {
            insert.setEnabled(false);
        }
    }

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        nif.setEditable(true);
        nif.setText("");
        name.setText("");
        email.setText("");
        phone.setText("");
        zipCode.setText("");
        photo.setIcon(null);
        //We reset the calendar date to the current date ...
        LocalDate dateLocate = LocalDate.now();
        ZoneId systemTimeZone = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime = dateLocate.atStartOfDay(systemTimeZone);
        Date dateUtil = java.sql.Date.from(zonedDateTime.toInstant());
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(dateUtil);
        DateModel<Calendar> dateModel = (DateModel<Calendar>) dateOfBirth.getModel();
        dateModel.setValue(calendar);
        //... but do not display it in the JDatePicker box
        dateOfBirth.getModel().setValue(null);
        insert.setEnabled(false);
    }//GEN-LAST:event_resetActionPerformed

    private void nifKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nifKeyTyped
        if (!isNumber(evt.getKeyChar()) && evt.getKeyChar() != KeyEvent.VK_BACK_SPACE && evt.getKeyChar() != KeyEvent.VK_DELETE) {
            JOptionPane.showMessageDialog(this, "Type only numbers [0-9]", this.getTitle(), JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }
    }//GEN-LAST:event_nifKeyTyped

    private void nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyTyped
        if (!isLetter(evt.getKeyChar()) && evt.getKeyChar() != KeyEvent.VK_BACK_SPACE && evt.getKeyChar() != KeyEvent.VK_DELETE) {
            JOptionPane.showMessageDialog(this, "Type only uppercase or lowercase letters, hyphens, and whitespace.", this.getTitle(), JOptionPane.ERROR_MESSAGE);
            evt.consume();
        } else if (isLetter(evt.getKeyChar()) || evt.getKeyChar() == KeyEvent.VK_BACK_SPACE || evt.getKeyChar() == KeyEvent.VK_DELETE) {
            showInsert();
        }
    }//GEN-LAST:event_nameKeyTyped

    private void nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyReleased
        showInsert();
    }//GEN-LAST:event_nameKeyReleased

    private void photoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoMouseClicked
        photo.setIcon(null);
    }//GEN-LAST:event_photoMouseClicked

    private void nifKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nifKeyReleased
        if (nif.getText().length() == 8) {
            nif.setText(calculateNifLetter(nif.getText()));
            nif.setEditable(false);
            showInsert();
        }
    }//GEN-LAST:event_nifKeyReleased

    private void nifKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nifKeyPressed
        if (nif.getText().length() == 8) {
            evt.consume();
            nif.setText(calculateNifLetter(nif.getText()));
            nif.setEditable(false);
            showInsert();
        }
    }//GEN-LAST:event_nifKeyPressed

    private void checkEmailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEmailFieldActionPerformed
        if (!checkEmailAddress(email.getText()) && email.getText().length() < 1) {
            JOptionPane.showMessageDialog(this, "Please introduce an email first before checking for validity.", this.getTitle(), JOptionPane.ERROR_MESSAGE);
            EmailIsValidCheck.setSelected(false);
        } else {
            if (!checkEmailAddress(email.getText())) {
                JOptionPane.showMessageDialog(this, "Email not valid, remember, type only lowercase or uppercase letters, hyphens and do not leave trailing whitespaces.\nName, must not be less than 1 character and more than 64 characters.\nDomain and sub-domain must not be less than 2 characters and more than 9 characters.\n\nAn email should look like this 'example@example.com'", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                EmailIsValidCheck.setSelected(false);
            } else {
                JOptionPane.showMessageDialog(this, "Email specified is valid.", this.getTitle(), JOptionPane.INFORMATION_MESSAGE);
                EmailIsValidCheck.setSelected(true);
            }
        }
    }//GEN-LAST:event_checkEmailFieldActionPerformed

    private void emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailKeyReleased
        showInsert();
    }//GEN-LAST:event_emailKeyReleased

    private void emailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailKeyTyped
        EmailIsValidCheck.setSelected(false);
    }//GEN-LAST:event_emailKeyTyped

    private void phoneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneKeyReleased
        showInsert();
    }//GEN-LAST:event_phoneKeyReleased

    private void phoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneKeyTyped
        PhoneValidCheck.setSelected(false);
    }//GEN-LAST:event_phoneKeyTyped

    private void checkPhoneFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPhoneFieldActionPerformed
        if (!checkPhoneNumber(phone.getText()) && phone.getText().length() < 1) {
            JOptionPane.showMessageDialog(this, "Please introduce a phone number first before checking for validity.", this.getTitle(), JOptionPane.ERROR_MESSAGE);
            PhoneValidCheck.setSelected(false);
        } else {
            if (!checkPhoneNumber(phone.getText())) {
                JOptionPane.showMessageDialog(this, "Phone not valid, remember, type only numbers, do not leave trailing whitespaces.\nPhone, must not be less than 1 number and more than 9 numbers.\n\nA phone number should look like this '945125691'", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                PhoneValidCheck.setSelected(false);
            } else {
                JOptionPane.showMessageDialog(this, "Phone specified is valid.", this.getTitle(), JOptionPane.INFORMATION_MESSAGE);
                PhoneValidCheck.setSelected(true);
            }
        }
    }//GEN-LAST:event_checkPhoneFieldActionPerformed

    private void zipCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_zipCodeKeyReleased
        showInsert();
    }//GEN-LAST:event_zipCodeKeyReleased

    private void zipCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_zipCodeKeyTyped
        ZipCodeValidCheck.setSelected(false);
    }//GEN-LAST:event_zipCodeKeyTyped

    private void checkZipCodeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkZipCodeFieldActionPerformed
        if (!checkZipCode(zipCode.getText()) && zipCode.getText().length() == 5) {
            JOptionPane.showMessageDialog(this, "Please introduce the ZIP Code first before checking for validity.", this.getTitle(), JOptionPane.ERROR_MESSAGE);
            ZipCodeValidCheck.setSelected(false);
        } else {
            if (!checkZipCode(zipCode.getText())) {
                JOptionPane.showMessageDialog(this, "ZIP Code is not valid, remember, type only numbers, do not leave trailing whitespaces.\nZipCode, must be 5 digits.\n\nA phone number should look like this '80000'", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                ZipCodeValidCheck.setSelected(false);
            } else {
                JOptionPane.showMessageDialog(this, "ZIP Code specified is valid.", this.getTitle(), JOptionPane.INFORMATION_MESSAGE);
                ZipCodeValidCheck.setSelected(true);
            }
        }
    }//GEN-LAST:event_checkZipCodeFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox EmailIsValidCheck;
    private javax.swing.JCheckBox PhoneValidCheck;
    private javax.swing.JCheckBox ZipCodeValidCheck;
    private javax.swing.JButton checkEmailField;
    private javax.swing.JButton checkPhoneField;
    private javax.swing.JButton checkZipCodeField;
    private org.jdatepicker.JDatePicker dateOfBirth;
    private javax.swing.JTextField email;
    private javax.swing.JButton insert;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField nif;
    private javax.swing.JTextField phone;
    private javax.swing.JLabel photo;
    private javax.swing.JButton reset;
    private javax.swing.JTextField zipCode;
    // End of variables declaration//GEN-END:variables

}
